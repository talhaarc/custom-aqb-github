name: Generate OpenAPI Schema

on:
  workflow_dispatch:
  push:
    branches:
      - main

permissions:
  contents: write   # <-- gives workflow permission to push

jobs:
  generate-schema:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Generate OpenAPI schema with custom version & servers
        run: |
          python - << 'EOF'
          from fastapi.openapi.utils import get_openapi
          from app.main import app
          import json

          schema = get_openapi(
              title=app.title,
              version=app.version,
              description=app.description,
              routes=app.routes
          )

          # 1. Override OpenAPI version
          schema["openapi"] = "3.0.3"

          # 2. Add servers section
          schema["servers"] = [
              {"url": "https://ezb7wdyxf656tg7m57crk3qcl40fbzda.lambda-url.us-west-2.on.aws",
            "description": "Production server"},
          ]

          # 3. Add OAuth2 security scheme
          schema.setdefault("components", {})
          schema["components"].setdefault("securitySchemes", {})
          schema["components"]["securitySchemes"]["OAuth2"] = {
              "type": "oauth2",
              "flows": {
                  "authorizationCode": {
                      "authorizationUrl": "https://github.com/login/oauth/authorize",
                      "tokenUrl": "https://github.com/login/oauth/access_token",
                      "scopes": {
                          "repo": "Full control of private repositories",
                          "delete_repo": "Delete repositories"
                      }
                  }
              }
          }

          # 4. Add security requirement to each path+method
          for path, path_item in schema.get("paths", {}).items():
              for method, method_obj in path_item.items():
                  if isinstance(method_obj, dict):
                      method_obj["security"] = [{"OAuth2": []}]
                      # Add description if missing
                      if "description" not in method_obj or not method_obj["description"]:
                          method_obj["description"] = f"{method.upper()} operation for {path}"

          # Write updated schema to file
          with open("openapi.json", "w") as f:
              json.dump(schema, f, indent=2)
          EOF

    #   - name: Generate OpenAPI schema
    #     run: |
    #       python - << 'EOF'
    #       from fastapi.openapi.utils import get_openapi
    #       from app.main import app  # Adjusted path
    #       import json

    #       schema = get_openapi(
    #           title=app.title,
    #           version=app.version,
    #           description=app.description,
    #           routes=app.routes
    #       )

    #       with open("openapi.json", "w") as f:
    #           json.dump(schema, f, indent=2)
    #       EOF

      - name: Commit schema to repo
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add openapi.json
          git diff --cached --quiet || git commit -m "Update OpenAPI schema"
          git push
